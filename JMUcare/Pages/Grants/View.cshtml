@page "{id:int}"
@using JMUcare.Pages.DBclass
@model JMUcare.Pages.Grants.ViewModel
@{
    ViewData["Title"] = "View Grant";

    // If Grant is null, redirect to Index page
    if (Model.Grant == null)
    {
        Response.Redirect("/Index");
        return;
    }

    bool isAdminOrGrantEditor = Model.CanAddPhase; // Using CanAddPhase as indicator for admin/grant editor
}

<div class="container-fluid mt-4">
    <!-- Success and Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Grant Details Section -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card shadow">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Grant Details</h4>
                    @if (isAdminOrGrantEditor)
                    {
                        <div>
                            <a asp-page="/Grants/Edit"
                               asp-route-id="@Model.Grant.GrantID"
                               class="btn btn-success btn-sm ms-2">
                                <i class="bi bi-pencil"></i> Edit
                            </a>
                            <a asp-page="/Grants/ManagePermissions" asp-route-id="@Model.Id" class="btn btn-light btn-sm ms-2">
                                <i class="bi bi-people"></i> Permissions
                            </a>
                            <form method="post" asp-page-handler="ArchiveGrant" class="d-inline ms-2" onsubmit="return confirmArchive()">
                                <input type="hidden" name="grantId" value="@Model.Id" />
                                <button type="submit" class="btn btn-danger btn-sm">
                                    <i class="bi bi-archive"></i> Archive Grant
                                </button>
                            </form>
                        </div>
                    }
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Grant Title</h5>
                                    <p class="card-text fs-6">@Model.Grant.GrantTitle</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Category</h5>
                                    <p class="card-text fs-6">@Model.Grant.Category</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Funding Source</h5>
                                    <p class="card-text fs-6">@Model.Grant.FundingSource</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Amount</h5>
                                    <p class="card-text fs-6">$@Model.Grant.Amount.ToString("N0")</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Grant Status</h5>
                                    <p class="card-text fs-6">@Model.Grant.Status</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Tracking Status</h5>
                                    <p class="card-text fs-6">@Model.Grant.TrackingStatus</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12 mb-3">
                            <div class="card h-100">
                                <div class="card-body">
                                    <h5 class="card-title">Description</h5>
                                    <p class="card-text fs-6">@Model.Grant.Description</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <a asp-page="Index" class="btn btn-secondary">Back to List</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Phases Section -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3>Associated Phases</h3>
                <div>
                    @if (Model.CanAddPhase)
                    {
                        <div class="dropdown me-2">
                            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="addDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-plus-circle"></i> Add
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="addDropdown">
                                <li><a class="dropdown-item" asp-page="/Phases/CreatePhase" asp-route-GrantId="@Model.Id">Add Phase</a></li>
                                <li><a class="dropdown-item" asp-page="/Sections/CreateProject" asp-route-GrantId="@Model.Id">Add Project</a></li>
                            </ul>
                        </div>
                        <button id="toggleDragBtn" class="btn btn-outline-primary" onclick="toggleDragMode()">
                            <i class="bi bi-arrows-move"></i> Reorder Phases
                        </button>
                        <button id="saveDragOrderBtn" class="btn btn-success ms-2" style="display: none" onclick="savePhaseOrder()">
                            Save Order
                        </button>
                        <button id="cancelDragBtn" class="btn btn-outline-secondary ms-2" style="display: none" onclick="cancelDragMode()">
                            Cancel
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- This is now just a hidden form for submitting phase order, not containing the phases -->
    <form id="reorderForm" method="post" asp-page="/Phases/ReorderPhases" style="display: none;">
        <input type="hidden" name="GrantId" value="@Model.Id" />
        <!-- Hidden fields for phase IDs will be added by JavaScript -->
    </form>

    <!-- Phases content - now outside of the reorderForm -->
    <div class="row">
        <div id="phaseContainer" class="d-flex flex-nowrap overflow-auto">
            @if (Model.Phases.Any())
            {
                @foreach (var phase in Model.Phases.Where(p => !p.IsArchived))
                {
                    <div class="col-md-4 phase-item mb-3 p-2" data-phase-id="@phase.PhaseID">
                        <div class="card shadow h-100">
                            <div class="card-header bg-info text-white">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="drag-handle" style="display: none">
                                        <i class="bi bi-grip-vertical"></i>
                                        <span class="dots">⋮⋮</span>
                                    </div>
                                    <h5 class="mb-0">@phase.PhaseName</h5>
                                    <div class="phase-actions">
                                        @{
                                            string accessLevel = DBClass.GetUserAccessLevelForPhase(Model.CurrentUserID, phase.PhaseID);
                                            if (accessLevel == "Edit")
                                            {
                                                <a asp-page="/Phases/Edit" asp-route-id="@phase.PhaseID" class="btn btn-sm btn-light">
                                                    <i class="bi bi-pencil"></i>
                                                </a>
                                                <!-- Archive Phase form is now a standalone form, not nested -->
                                                <form method="post" asp-page-handler="ArchivePhase" class="d-inline">
                                                    <input type="hidden" name="phaseId" value="@phase.PhaseID" />
                                                    <button type="submit" class="btn btn-danger btn-sm">
                                                        <i class="bi bi-archive"></i> Archive
                                                    </button>
                                                </form>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <small class="text-muted">@phase.Description</small>
                                </div>

                                <div class="phase-content">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0">Projects</h6>
                                        @if (Model.CanAddProject)
                                        {
                                            <a asp-page="/Sections/CreateProject" asp-route-PhaseId="@phase.PhaseID" class="btn btn-sm btn-primary">
                                                <i class="bi bi-plus-circle"></i> Add Project
                                            </a>
                                        }
                                    </div>

                                    @if (Model.PhaseProjects[phase.PhaseID].Any(p => !p.IsArchived))
                                    {
                                        <div class="project-list">
                                            @foreach (var project in Model.PhaseProjects[phase.PhaseID].Where(p => !p.IsArchived))
                                            {
                                                <div class="card mb-2 project-card">
                                                    <div class="card-header py-2 bg-light">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <h6 class="mb-0">
                                                                <a asp-page="/Projects/View" asp-route-id="@project.ProjectID" class="text-decoration-none">
                                                                    @project.Title
                                                                </a>
                                                            </h6>
                                                            <div>
                                                                @* Removed the project edit button *@
 
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="card-body py-2">
                                                        <p class="small mb-2">@project.Project_Description</p>

                                                        @if (Model.ProjectTasks[project.ProjectID].Any(t => !t.IsArchived))
                                                        {
                                                            <h6 class="mt-2 mb-1 small">Tasks</h6>
                                                            <ul class="list-group list-group-flush small">
                                                                @foreach (var task in Model.ProjectTasks[project.ProjectID].Where(t => !t.IsArchived))
                                                                {
                                                                    <li class="list-group-item py-1 px-2">
                                                                        <div class="d-flex justify-content-between">
                                                                            <div>@task.TaskContent</div>
                                                                            <div class="badge @(task.Status == "Completed" ? "bg-success" : "bg-warning")">
                                                                                @task.Status
                                                                            </div>
                                                                        </div>
                                                                        <small class="text-muted">Due: @task.DueDate.ToShortDateString()</small>
                                                                    </li>
                                                                }
                                                            </ul>
                                                        }
                                                        else
                                                        {
                                                            <p class="small text-muted mb-0">No tasks defined</p>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="small text-muted">No projects are associated with this phase.</p>
                                    }
                                </div>
                            </div>
                            <div class="card-footer bg-light">
                                <span class="badge @(phase.Status == "Completed" ? "bg-success" :
                                                  phase.Status == "In Progress" ? "bg-primary" :
                                                  phase.Status == "Pending" ? "bg-warning" : "bg-secondary")">
                                    @phase.Status
                                </span>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    @if (!Model.Phases.Any(p => !p.IsArchived))
    {
        <div class="alert alert-info">
            <p>No phases are associated with this grant.</p>
            @if (Model.CanAddPhase)
            {
                <a asp-page="/Phases/CreatePhase" asp-route-GrantId="@Model.Id" class="btn btn-primary mt-2">
                    <i class="bi bi-plus-circle"></i> Add your first phase
                </a>
            }
        </div>
    }
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <script>
        let sortable;
        let isDragMode = false;

        function toggleDragMode() {
            isDragMode = true;

            // Show drag mode UI
            document.querySelectorAll('.drag-handle').forEach(el => el.style.display = 'block');
            document.querySelectorAll('.phase-actions').forEach(el => el.style.display = 'none');
            document.querySelectorAll('.phase-content').forEach(el => el.style.display = 'none');
            document.getElementById('toggleDragBtn').style.display = 'none';
            document.getElementById('saveDragOrderBtn').style.display = 'inline-block';
            document.getElementById('cancelDragBtn').style.display = 'inline-block';

            // Hide the add phase button during drag mode
            const addPhaseBtn = document.querySelector('.add-phase-btn');
            if (addPhaseBtn) addPhaseBtn.parentElement.style.display = 'none';

            // Add visual cues for draggable items
            document.querySelectorAll('.phase-item').forEach(el => {
                el.classList.add('draggable');
                // Add the move cursor to show it's draggable
                el.style.cursor = 'move';
            });

            // Initialize Sortable.js
            const container = document.getElementById('phaseContainer');
            sortable = Sortable.create(container, {
                animation: 150,
                handle: '.drag-handle',
                ghostClass: 'sortable-ghost',
                chosenClass: 'sortable-chosen',
                dragClass: 'sortable-drag'
            });
        }

        function cancelDragMode() {
            // Reset the UI
            resetDragMode();

            // Reload the page to reset the original order
            location.reload();
        }
                function confirmArchive() {
            return confirm("Are you sure you want to archive this grant? This will also archive all associated phases, projects, and tasks.");
        }

        function resetDragMode() {
            isDragMode = false;

            // Hide drag mode UI
            document.querySelectorAll('.drag-handle').forEach(el => el.style.display = 'none');
            document.querySelectorAll('.phase-actions').forEach(el => el.style.display = 'block');
            document.querySelectorAll('.phase-content').forEach(el => el.style.display = 'block');
            document.getElementById('toggleDragBtn').style.display = 'inline-block';
            document.getElementById('saveDragOrderBtn').style.display = 'none';
            document.getElementById('cancelDragBtn').style.display = 'none';

            // Show the add phase button again
            const addPhaseBtn = document.querySelector('.add-phase-btn');
            if (addPhaseBtn) addPhaseBtn.parentElement.style.display = 'block';

            // Remove visual cues for draggable items
            document.querySelectorAll('.phase-item').forEach(el => {
                el.classList.remove('draggable');
                el.style.cursor = 'default';
            });

            // Destroy Sortable instance if it exists
            if (sortable) {
                sortable.destroy();
                sortable = null;
            }
        }

        function savePhaseOrder() {
            // Get all phase IDs in their current order
            const phaseIds = [];
            document.querySelectorAll('.phase-item').forEach(item => {
                phaseIds.push(item.getAttribute('data-phase-id'));
            });

            // Get the form and show it (in case it's hidden)
            const form = document.getElementById('reorderForm');

            // Clear any existing hidden fields
            const existingInputs = form.querySelectorAll('input[name="PhaseIds"]');
            existingInputs.forEach(input => input.remove());

            // Add current order as hidden fields
            phaseIds.forEach(id => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'PhaseIds';
                input.value = id;
                form.appendChild(input);
            });

            // Submit the form
            form.submit();
        }
    </script>

    <style>
        /* Grant Details */
        .card {
            transition: all 0.2s ease;
        }

        /* Phases Styling */
        #phaseContainer {
            min-height: 400px;
            padding-bottom: 20px;
        }

        .phase-item {
            min-width: 350px;
            max-width: 400px;
        }

        .add-phase-btn {
            height: 120px;
            width: 200px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            border: 2px dashed #0d6efd;
            border-radius: 8px;
        }

        /* Draggable Phases */
        .draggable {
            border-left: 4px solid #0d6efd;
            transition: all 0.2s ease-in-out;
        }

            .draggable:hover {
                background-color: #f8f9fa;
            }

        .drag-handle {
            display: inline-block;
            padding: 8px;
            cursor: grab;
            font-size: 1.5rem;
            color: #6c757d;
            user-select: none;
        }

        .sortable-ghost {
            opacity: 0.5;
            background-color: #e9ecef;
        }

        .drag-handle .dots {
            font-size: 1.2rem;
            font-family: monospace;
            color: #6c757d;
        }

        .sortable-chosen {
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }

        /* Projects */
        .project-card {
            transition: transform 0.2s ease;
            border-left: 3px solid #6c757d;
        }

            .project-card:hover

            .project-card:hover {
                transform: translateY(-3px);
            }

        /* Scrollbar styling */
        #phaseContainer::-webkit-scrollbar {
            height: 8px;
        }

        #phaseContainer::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        #phaseContainer::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

            #phaseContainer::-webkit-scrollbar-thumb:hover {
                background: #555;
            }
    </style>
}
