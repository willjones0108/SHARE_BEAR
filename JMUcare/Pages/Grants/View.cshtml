@page "{id:int}"
@using JMUcare.Pages.DBclass
@model JMUcare.Pages.Grants.ViewModel
@{
    ViewData["Title"] = "View Grant";

    // If Grant is null, redirect to Index page
    if (Model.Grant == null)
    {
        Response.Redirect("/Index");
        return;
    }

    bool isAdminOrGrantEditor = Model.CanAddPhase; // Using CanAddPhase as indicator for admin/grant editor
}

<div class="container-fluid mt-4">
    <!-- Success and Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Grant Details Section -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card shadow">
                <div class="card-header jmu-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Grant Details</h4>
                    @if (isAdminOrGrantEditor)
                    {
                        <div>
                            <a asp-page="/Grants/Edit"
                               asp-route-id="@Model.Grant.GrantID"
                               class="btn jmu-btn-primary btn-sm ms-2">
                                <i class="bi bi-pencil"></i> Edit
                            </a>
                            <a asp-page="/Grants/ManagePermissions" asp-route-id="@Model.Id" class="btn jmu-btn-outline btn-sm ms-2">
                                <i class="bi bi-people"></i> Permissions
                            </a>
                            <form method="post" asp-page-handler="ArchiveGrant" class="d-inline ms-2" onsubmit="return confirmArchive()">
                                <input type="hidden" name="grantId" value="@Model.Id" />
                                <button type="submit" class="btn jmu-btn-danger btn-sm">
                                    <i class="bi bi-archive"></i> Archive Grant
                                </button>
                            </form>
                        </div>
                    }
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <div class="card h-100 grant-info-card">
                                <div class="card-body">
                                    <h5 class="card-title">Grant Title</h5>
                                    <p class="card-text fs-6">@Model.Grant.GrantTitle</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="card h-100 grant-info-card">
                                <div class="card-body">
                                    <h5 class="card-title">Category</h5>
                                    <p class="card-text fs-6">@Model.Grant.Category</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="card h-100 grant-info-card">
                                <div class="card-body">
                                    <h5 class="card-title">Funding Source</h5>
                                    <p class="card-text fs-6">@Model.Grant.FundingSource</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="card h-100 grant-info-card">
                                <div class="card-body">
                                    <h5 class="card-title">Amount</h5>
                                    <p class="card-text fs-6">$@Model.Grant.Amount.ToString("N0")</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="card h-100 grant-info-card">
                                <div class="card-body">
                                    <h5 class="card-title">Grant Status</h5>
                                    <p class="card-text fs-6">
                                        <span class="badge jmu-badge-@(Model.Grant.Status.ToLower() == "active" ? "success" : "primary")">
                                            @Model.Grant.Status
                                        </span>
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <div class="card h-100 grant-info-card">
                                <div class="card-body">
                                    <h5 class="card-title">Tracking Status</h5>
                                    <p class="card-text fs-6">@Model.Grant.TrackingStatus</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12 mb-3">
                            <div class="card h-100 grant-info-card">
                                <div class="card-body">
                                    <h5 class="card-title">Description</h5>
                                    <p class="card-text fs-6">@Model.Grant.Description</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <a asp-page="Index" class="btn jmu-btn-outline">Back to List</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Admin/Grant Lead Documents Section -->
    @if (Model.CanViewAllDocuments && Model.Documents.Any())
    {
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card shadow">
                    <div class="card-header jmu-header d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Grant Documents</h4>
                        @if (Model.IsAdmin || Model.IsGrantLead)
                        {
                            <button type="button" class="btn jmu-btn-light btn-sm" data-bs-toggle="modal" data-bs-target="#uploadDocumentModal">
                                <i class="bi bi-upload"></i> Upload Document
                            </button>
                        }
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>File Name</th>
                                        <th>Uploaded By</th>
                                        <th>Date</th>
                                        <th>Size</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var document in Model.Documents)
                                    {
                                        <tr>
                                            <td>
                                                <i class="bi @Model.GetFileIcon(document.FileName)"></i>
                                                @document.FileName
                                            </td>
                                            <td>@Model.GetUploaderName(document.UploadedBy)</td>
                                            <td>@document.UploadedDate.ToShortDateString()</td>
                                            <td>@Model.FormatFileSize(document.FileSize)</td>
                                            <td>
                                                <a href="@document.BlobUrl" target="_blank" class="btn btn-sm jmu-btn-outline" title="Download">
                                                    <i class="bi bi-download"></i>
                                                </a>
                                                @if (Model.CanUserEditDocument(document))
                                                {
                                                    <a href="#" class="btn btn-sm jmu-btn-danger"
                                                       onclick="confirmDelete(@document.DocumentID)" title="Delete">
                                                        <i class="bi bi-trash"></i>
                                                    </a>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (Model.CanViewAllDocuments)
    {
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card shadow">
                    <div class="card-header jmu-header d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Grant Documents</h4>
                        <button type="button" class="btn jmu-btn-light btn-sm" data-bs-toggle="modal" data-bs-target="#uploadDocumentModal">
                            <i class="bi bi-upload"></i> Upload Document
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="alert jmu-alert">
                            <p class="mb-0">No documents have been uploaded to this grant.</p>
                            <button type="button" class="btn jmu-btn-primary mt-2" data-bs-toggle="modal" data-bs-target="#uploadDocumentModal">
                                <i class="bi bi-upload"></i> Upload your first document
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- User Accessible Documents Section -->
    @if (!Model.CanViewAllDocuments && Model.AccessibleDocuments.Any())
    {
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card shadow">
                    <div class="card-header jmu-header d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Available Documents</h4>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>File Name</th>
                                        <th>Uploaded By</th>
                                        <th>Date</th>
                                        <th>Size</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var document in Model.AccessibleDocuments)
                                    {
                                        <tr>
                                            <td>
                                                <i class="bi @Model.GetFileIcon(document.FileName)"></i>
                                                @document.FileName
                                            </td>
                                            <td>@Model.GetUploaderName(document.UploadedBy)</td>
                                            <td>@document.UploadedDate.ToShortDateString()</td>
                                            <td>@Model.FormatFileSize(document.FileSize)</td>
                                            <td>
                                                <a href="@document.BlobUrl" target="_blank" class="btn btn-sm jmu-btn-outline" title="Download">
                                                    <i class="bi bi-download"></i>
                                                </a>
                                                @if (Model.CanUserEditDocument(document))
                                                {
                                                    <a href="#" class="btn btn-sm jmu-btn-danger"
                                                       onclick="confirmDelete(@document.DocumentID)" title="Delete">
                                                        <i class="bi bi-trash"></i>
                                                    </a>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Phases Section -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3 class="jmu-title">Associated Phases</h3>
                <div>
                    @if (Model.CanAddPhase)
                    {
                        <div class="dropdown me-2">
                            <button class="btn jmu-btn-outline dropdown-toggle" type="button" id="addDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-plus-circle"></i> Add
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="addDropdown">
                                <li><a class="dropdown-item" asp-page="/Phases/CreatePhase" asp-route-GrantId="@Model.Id">Add Phase</a></li>
                                <li><a class="dropdown-item" asp-page="/Sections/CreateProject" asp-route-GrantId="@Model.Id">Add Task</a></li>
                            </ul>
                        </div>
                        <button id="toggleDragBtn" class="btn jmu-btn-outline" onclick="toggleDragMode()">
                            <i class="bi bi-arrows-move"></i> Reorder Phases
                        </button>
                        <button id="saveDragOrderBtn" class="btn jmu-btn-success ms-2" style="display: none" onclick="savePhaseOrder()">
                            Save Order
                        </button>
                        <button id="cancelDragBtn" class="btn btn-outline-secondary ms-2" style="display: none" onclick="cancelDragMode()">
                            Cancel
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- This is now just a hidden form for submitting phase order, not containing the phases -->
    <form id="reorderForm" method="post" asp-page="/Phases/ReorderPhases" style="display: none;">
        <input type="hidden" name="GrantId" value="@Model.Id" />
        <!-- Hidden fields for phase IDs will be added by JavaScript -->
    </form>

    <!-- Phases content - now outside of the reorderForm -->
    <div class="row">
        <div id="phaseContainer" class="d-flex flex-nowrap overflow-auto">
            @if (Model.Phases.Any())
            {
                @foreach (var phase in Model.Phases.Where(p => !p.IsArchived))
                {
                    <div class="col-md-4 phase-item mb-3 p-2" data-phase-id="@phase.PhaseID">
                        <div class="card shadow h-100">
                            <div class="card-header jmu-header-secondary">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="drag-handle" style="display: none">
                                        <i class="bi bi-grip-vertical"></i>
                                        <span class="dots">⋮⋮</span>
                                    </div>
                                    <h5 class="mb-0">@phase.PhaseName</h5>
                                    <div class="phase-actions">
                                        @{
                                            string accessLevel = DBClass.GetUserAccessLevelForPhase(Model.CurrentUserID, phase.PhaseID);
                                            if (accessLevel == "Edit")
                                            {
                                                <a asp-page="/Phases/Edit" asp-route-id="@phase.PhaseID" class="btn btn-sm jmu-btn-light">
                                                    <i class="bi bi-pencil"></i>
                                                </a>
                                                <form method="post" asp-page-handler="ArchivePhase" class="d-inline">
                                                    <input type="hidden" name="phaseId" value="@phase.PhaseID" />
                                                    <button type="submit" class="btn jmu-btn-danger btn-sm">
                                                        <i class="bi bi-archive"></i>
                                                    </button>
                                                </form>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <small class="text-muted">@phase.Description</small>
                                </div>

                                <div class="phase-content">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0 jmu-subtitle">Tasks</h6>
                                        @{
                                            // Check if user is a phase editor for this specific phase
                                            string phaseAccessLevel = DBClass.GetUserAccessLevelForPhase(Model.CurrentUserID, phase.PhaseID);
                                            bool canAddProjectToThisPhase = Model.CanAddProject || phaseAccessLevel == "Edit";

                                            if (canAddProjectToThisPhase)
                                            {
                                                <a asp-page="/Sections/CreateProject" asp-route-PhaseId="@phase.PhaseID" class="btn btn-sm jmu-btn-primary">
                                                    <i class="bi bi-plus-circle"></i> Add
                                                </a>
                                            }
                                        }
                                    </div>


                                    @if (Model.PhaseProjects[phase.PhaseID].Any(p => !p.IsArchived))
                                    {
                                        <div class="project-list">
                                            @foreach (var project in Model.PhaseProjects[phase.PhaseID].Where(p => !p.IsArchived))
                                            {
                                                <div class="card mb-2 project-card">
                                                    <div class="card-header py-2 bg-light">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <h6 class="mb-0">
                                                                <a asp-page="/Projects/View" asp-route-id="@project.ProjectID" class="text-decoration-none project-title">
                                                                    @project.Title
                                                                </a>
                                                            </h6>
                                                        </div>
                                                    </div>
                                                    <div class="card-body py-2">
                                                        <p class="small mb-2">@project.Project_Description</p>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="small text-muted">No tasks are associated with this phase.</p>
                                    }
                                </div>
                            </div>
                            <div class="card-footer bg-light">
                                <span class="badge jmu-badge-@(phase.Status == "Completed" ? "success" :
                                                  phase.Status == "In Progress" ? "primary" :
                                                  phase.Status == "Pending" ? "warning" : "secondary")">
                                    @phase.Status
                                </span>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    @if (!Model.Phases.Any(p => !p.IsArchived))
    {
        <div class="alert jmu-alert">
            <p>No phases are associated with this grant.</p>
            @if (Model.CanAddPhase)
            {
                <a asp-page="/Phases/CreatePhase" asp-route-GrantId="@Model.Id" class="btn jmu-btn-primary mt-2">
                    <i class="bi bi-plus-circle"></i> Add your first phase
                </a>
            }
        </div>
    }

    <!-- Upload Document Modal -->
    <div class="modal fade" id="uploadDocumentModal" tabindex="-1" aria-labelledby="uploadDocumentModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form method="post" enctype="multipart/form-data" asp-page-handler="UploadDocument">
                    <div class="modal-header jmu-header">
                        <h5 class="modal-title" id="uploadDocumentModalLabel">Upload Document</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" name="entityType" value="grant" />
                        <input type="hidden" name="entityId" value="@Model.Id" />

                        <div class="mb-3">
                            <label for="documentFile" class="form-label">Select File</label>
                            <input type="file" class="form-control" id="documentFile" name="file" required>
                            <div class="form-text">
                                Supported formats: PDF, DOC, DOCX, XLS, XLSX, TXT, JPG, PNG. Maximum size: 50MB.
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn jmu-btn-primary">Upload</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteDocumentModal" tabindex="-1" aria-labelledby="deleteDocumentModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header jmu-header">
                    <h5 class="modal-title" id="deleteDocumentModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this document? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <a id="confirmDeleteButton" href="#" class="btn jmu-btn-danger">Delete</a>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <script>
        let sortable;
        let isDragMode = false;

        function toggleDragMode() {
            isDragMode = true;

            // Show drag mode UI
            document.querySelectorAll('.drag-handle').forEach(el => el.style.display = 'block');
            document.querySelectorAll('.phase-actions').forEach(el => el.style.display = 'none');
            document.querySelectorAll('.phase-content').forEach(el => el.style.display = 'none');
            document.getElementById('toggleDragBtn').style.display = 'none';
            document.getElementById('saveDragOrderBtn').style.display = 'inline-block';
            document.getElementById('cancelDragBtn').style.display = 'inline-block';

            // Hide the add phase button during drag mode
            const addPhaseBtn = document.querySelector('.add-phase-btn');
            if (addPhaseBtn) addPhaseBtn.parentElement.style.display = 'none';

            // Add visual cues for draggable items
            document.querySelectorAll('.phase-item').forEach(el => {
                el.classList.add('draggable');
                // Add the move cursor to show it's draggable
                el.style.cursor = 'move';
            });

            // Initialize Sortable.js
            const container = document.getElementById('phaseContainer');
            sortable = Sortable.create(container, {
                animation: 150,
                handle: '.drag-handle',
                ghostClass: 'sortable-ghost',
                chosenClass: 'sortable-chosen',
                dragClass: 'sortable-drag'
            });
        }

        function cancelDragMode() {
            // Reset the UI
            resetDragMode();

            // Reload the page to reset the original order
            location.reload();
        }

        function confirmArchive() {
            return confirm("Are you sure you want to archive this grant? This will also archive all associated phases, and tasks.");
        }

        function resetDragMode() {
            isDragMode = false;

            // Hide drag mode UI
            document.querySelectorAll('.drag-handle').forEach(el => el.style.display = 'none');
            document.querySelectorAll('.phase-actions').forEach(el => el.style.display = 'block');
            document.querySelectorAll('.phase-content').forEach(el => el.style.display = 'block');
            document.getElementById('toggleDragBtn').style.display = 'inline-block';
            document.getElementById('saveDragOrderBtn').style.display = 'none';
            document.getElementById('cancelDragBtn').style.display = 'none';

            // Show the add phase button again
            const addPhaseBtn = document.querySelector('.add-phase-btn');
            if (addPhaseBtn) addPhaseBtn.parentElement.style.display = 'block';

            // Remove visual cues for draggable items
            document.querySelectorAll('.phase-item').forEach(el => {
                el.classList.remove('draggable');
                el.style.cursor = 'default';
            });

            // Destroy Sortable instance if it exists
            if (sortable) {
                sortable.destroy();
                sortable = null;
            }
        }

        function savePhaseOrder() {
            // Get all phase IDs in their current order
            const phaseIds = [];
            document.querySelectorAll('.phase-item').forEach(item => {
                phaseIds.push(item.getAttribute('data-phase-id'));
            });

            // Get the form and show it (in case it's hidden)
            const form = document.getElementById('reorderForm');

            // Clear any existing hidden fields
            const existingInputs = form.querySelectorAll('input[name="PhaseIds"]');
            existingInputs.forEach(input => input.remove());

            // Add current order as hidden fields
            phaseIds.forEach(id => {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'PhaseIds';
                input.value = id;
                form.appendChild(input);
            });

            // Submit the form
            form.submit();
        }

        // Document deletion confirmation
        function confirmDelete(documentId) {
            // Set the document ID in the confirm button's href
            document.getElementById('confirmDeleteButton').href =
                `?handler=DeleteDocument&documentId=${documentId}&grantId=@Model.Id`;

            // Show the modal
            var deleteModal = new bootstrap.Modal(document.getElementById('deleteDocumentModal'));
            deleteModal.show();
        }

        // File input validation
        document.getElementById('documentFile')?.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (!file) return;

            const fileSize = file.size / 1024 / 1024; // size in MB
            const fileExtension = file.name.split('.').pop().toLowerCase();
            const allowedExtensions = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'txt', 'jpg', 'png'];

            if (fileSize > 50) {
                alert('File size exceeds the 50MB limit');
                this.value = '';
            } else if (!allowedExtensions.includes(fileExtension)) {
                alert('File type is not supported');
                this.value = '';
            }
        });
    </script>

    <style>
        /* JMU Custom Variables */
        :root {
            --jmu-purple: #450084;
            --jmu-gold: #CBB677;
            --jmu-gray: #8D8D8D;
            --jmu-light-gray: #f2f2f2;
            --jmu-dark-purple: #370068;
            --jmu-light-gold: #dfd4a9;
        }

        /* JMU Styling Elements */
        .jmu-header {
            background-color: var(--jmu-purple);
            color: white;
            border-bottom: 3px solid var(--jmu-gold);
        }

        .jmu-header-secondary {
            background-color: var(--jmu-dark-purple);
            color: white;
            border-bottom: 2px solid var(--jmu-gold);
        }

        .jmu-title {
            color: var(--jmu-purple);
            font-weight: 600;
        }

        .jmu-subtitle {
            color: var(--jmu-dark-purple);
            font-weight: 500;
        }

        /* Button styles */
        .jmu-btn-primary {
            background-color: var(--jmu-purple);
            color: white;
            border-color: var(--jmu-purple);
        }

            .jmu-btn-primary:hover {
                background-color: var(--jmu-dark-purple);
                color: white;
                border-color: var(--jmu-dark-purple);
            }

        .jmu-btn-success {
            background-color: #28a745;
            color: white;
            border-color: #28a745;
        }

        .jmu-btn-danger {
            background-color: #dc3545;
            color: white;
            border-color: #dc3545;
        }

        .jmu-btn-outline {
            color: var(--jmu-purple);
            border-color: var(--jmu-purple);
            background-color: white;
        }

            .jmu-btn-outline:hover {
                background-color: var(--jmu-purple);
                color: white;
            }

        .jmu-btn-light {
            color: var(--jmu-purple);
            background-color: white;
            border-color: white;
        }

        /* Badge styles */
        .jmu-badge-primary {
            background-color: var(--jmu-purple);
        }

        .jmu-badge-success {
            background-color: #28a745;
        }

        .jmu-badge-warning {
            background-color: #ffc107;
            color: #212529;
        }

        .jmu-badge-secondary {
            background-color: var(--jmu-gray);
        }

        .jmu-alert {
            background-color: var(--jmu-light-gold);
            border-left: 5px solid var(--jmu-gold);
            color: #333;
        }

        /* Grant Details */
        .card {
            transition: all 0.2s ease;
            border: none;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }

        .grant-info-card {
            border-left: 3px solid var(--jmu-gold);
        }

            .grant-info-card .card-title {
                color: var(--jmu-purple);
                font-weight: 600;
                font-size: 1rem;
                border-bottom: 1px solid #eee;
                padding-bottom: 8px;
                margin-bottom: 10px;
            }

        /* Phases Styling */
        #phaseContainer {
            min-height: 400px;
            padding-bottom: 20px;
        }

        .phase-item {
            min-width: 350px;
            max-width: 400px;
        }

        .add-phase-btn {
            height: 120px;
            width: 200px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            border: 2px dashed var(--jmu-purple);
            border-radius: 8px;
            color: var(--jmu-purple);
        }

        /* Draggable Phases */
        .draggable {
            border-left: 4px solid var(--jmu-gold);
            transition: all 0.2s ease-in-out;
        }

            .draggable:hover {
                background-color: #f8f9fa;
            }

        .drag-handle {
            display: inline-block;
            padding: 8px;
            cursor: grab;
            font-size: 1.5rem;
            color: var(--jmu-gold);
            user-select: none;
        }

        .sortable-ghost {
            opacity: 0.5;
            background-color: #e9ecef;
        }

        .drag-handle .dots {
            font-size: 1.2rem;
            font-family: monospace;
            color: var(--jmu-light-gold);
        }

        .sortable-chosen {
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }

        /* Projects */
        .project-card {
            transition: transform 0.2s ease;
            border-left: 3px solid var(--jmu-gold);
            border-radius: 5px;
            overflow: hidden;
        }

            .project-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }

        .project-title {
            color: var(--jmu-purple);
            font-weight: 500;
        }

            .project-title:hover {
                color: var(--jmu-dark-purple);
                text-decoration: underline !important;
            }

        /* Scrollbar styling */
        #phaseContainer::-webkit-scrollbar {
            height: 8px;
        }

        #phaseContainer::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        #phaseContainer::-webkit-scrollbar-thumb {
            background: var(--jmu-gray);
            border-radius: 4px;
        }

            #phaseContainer::-webkit-scrollbar-thumb:hover {
                background: var(--jmu-purple);
            }
    </style>
}
