
-- Base Tables
CREATE TABLE UserRole (
    UserRoleID INT PRIMARY KEY,
    RoleName VARCHAR(100),         -- Admin, Contributor, Viewer, etc.
    Description TEXT
);

CREATE TABLE Grants (
    GrantID INT IDENTITY(1,1) PRIMARY KEY,
    GrantTitle VARCHAR(255),
    Category VARCHAR(100),
    FundingSource VARCHAR(255),
    Amount DECIMAL(12,2),
    Status VARCHAR(50),
    CreatedBy INT,
    GrantLeadID INT,
    Description VARCHAR(MAX),
    TrackingStatus NVARCHAR(MAX),
    IsArchived BIT
);

-- User Tables
CREATE TABLE DBUser (
    UserID INT IDENTITY(1,1) PRIMARY KEY,
    FirstName VARCHAR(100),
    LastName VARCHAR(100),
    Email VARCHAR(150),
    Username VARCHAR(150),
    UserRoleID INT,
    UpdatedAt DATETIME,
    IsArchived BIT,
    FOREIGN KEY (UserRoleID) REFERENCES UserRole(UserRoleID)
);

CREATE TABLE Business_Partner (
    Business_Partner_ID INT PRIMARY KEY,
    Business_Name VARCHAR(150),
    BusinessType VARCHAR(100),
    OrgType VARCHAR(100),
    ContactInfo TEXT,
    Status_Flag VARCHAR(50),
    IsArchived BIT,
    AdminUserID INT, -- NEW
    FOREIGN KEY (AdminUserID) REFERENCES DBUser(UserID) -- NEW
);

CREATE TABLE Business_Partner_User (
    PartnerUserID INT PRIMARY KEY IDENTITY(1,1),
    Business_Partner_ID INT,
    UserID INT,
    FOREIGN KEY (Business_Partner_ID) REFERENCES Business_Partner(Business_Partner_ID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

-- Add foreign keys to Grants now that DBUser exists
ALTER TABLE Grants
ADD CONSTRAINT FK_Grants_CreatedBy FOREIGN KEY (CreatedBy) REFERENCES DBUser(UserID);

ALTER TABLE Grants
ADD CONSTRAINT FK_Grants_GrantLeadID FOREIGN KEY (GrantLeadID) REFERENCES DBUser(UserID);

CREATE TABLE Master_Project (
    MasterProjectID INT PRIMARY KEY,
    Title VARCHAR(255),
    Description TEXT,
    Status VARCHAR(50),
    CreatedBy INT,
    ProjectLeadID INT,
    IsArchived BIT,
    Master_Project_Description TEXT,
    FOREIGN KEY (CreatedBy) REFERENCES DBUser(UserID),
    FOREIGN KEY (ProjectLeadID) REFERENCES DBUser(UserID)
);

-- Project and Related Tables
CREATE TABLE Project (
    ProjectID INT PRIMARY KEY IDENTITY(1,1),
    Title VARCHAR(255),
    CreatedBy INT,
    GrantID INT NULL,
    ProjectType VARCHAR(50), 
    TrackingStatus NVARCHAR(MAX),
    IsArchived BIT,
    Project_Description TEXT,
    FOREIGN KEY (CreatedBy) REFERENCES DBUser(UserID)
   
);

CREATE TABLE Project_Task (
    TaskID INT PRIMARY KEY IDENTITY(1,1),
    ProjectID INT,
    TaskContent TEXT,
    DueDate DATE,
    Status VARCHAR(50),
    FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID)
);

CREATE TABLE Project_Task_User (
    ProjectTaskUserID INT PRIMARY KEY IDENTITY(1,1),
    TaskID INT,
    UserID INT,
    Role VARCHAR(100), -- Optional: 'Assignee', 'Reviewer', etc.
    FOREIGN KEY (TaskID) REFERENCES Project_Task(TaskID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

-- Reminder Table (needed before Calendar_Event)
CREATE TABLE Reminder (
    ReminderID INT PRIMARY KEY,
    UserID INT,
    DueDate DATETIME,
    Acknowledged BIT,
    Status VARCHAR(50),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

CREATE TABLE Calendar_Event (
    EventID INT PRIMARY KEY,
    EventType VARCHAR(100),
    StartDateTime DATETIME,
    EndDateTime DATETIME,
    UserID INT,
    GrantID INT,
    ProjectID INT,
    TaskID INT,
    ReminderID INT,
    History TEXT,
    Status VARCHAR(50),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID), -- Added foreign key
    FOREIGN KEY (GrantID) REFERENCES Grants(GrantID),
    FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID),
    FOREIGN KEY (TaskID) REFERENCES Project_Task(TaskID), -- Added foreign key
    FOREIGN KEY (ReminderID) REFERENCES Reminder(ReminderID) -- Added foreign key
);

-- Permission Tables
CREATE TABLE User_Permissions (
    PermissionID INT PRIMARY KEY,
    UserID INT,
    Permissions NVARCHAR(MAX),  -- Stores grant/project/task IDs and feature flags
    AccessLevel VARCHAR(100),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

CREATE TABLE Event_Permission (
    EventID INT,
    UserID INT,
    AccessLevel VARCHAR(50),
    PRIMARY KEY (EventID, UserID),
    FOREIGN KEY (EventID) REFERENCES Calendar_Event(EventID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

CREATE TABLE Grant_Permission (
    GrantID INT,
    UserID INT,
    AccessLevel VARCHAR(50),       -- View, Edit, FullControl, etc.
    PRIMARY KEY (GrantID, UserID),
    FOREIGN KEY (GrantID) REFERENCES Grants(GrantID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

CREATE TABLE Project_Permission (
    ProjectID INT,
    UserID INT,
    AccessLevel VARCHAR(50),
    PRIMARY KEY (ProjectID, UserID),
    FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

-- New Phase Tables
CREATE TABLE Phase (
    PhaseID INT PRIMARY KEY IDENTITY(1,1),
    PhaseName VARCHAR(255),
    Description TEXT,
    Status VARCHAR(50),
    CreatedBy INT,
    PhaseLeadID INT,
    IsArchived BIT,
    FOREIGN KEY (CreatedBy) REFERENCES DBUser(UserID),
    FOREIGN KEY (PhaseLeadID) REFERENCES DBUser(UserID)
);

CREATE TABLE Grant_Phase (
    GrantID INT,
    PhaseID INT,
    PRIMARY KEY (GrantID, PhaseID),
    FOREIGN KEY (GrantID) REFERENCES Grants(GrantID),
    FOREIGN KEY (PhaseID) REFERENCES Phase(PhaseID)
);

CREATE TABLE Phase_Project (
    PhaseID INT,
    ProjectID INT,
    PRIMARY KEY (PhaseID, ProjectID),
    FOREIGN KEY (PhaseID) REFERENCES Phase(PhaseID),
    FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID)
);

CREATE TABLE Phase_Permission (
    PhaseID INT,
    UserID INT,
    AccessLevel VARCHAR(50),       -- View, Edit, FullControl, etc.
    PRIMARY KEY (PhaseID, UserID),
    FOREIGN KEY (PhaseID) REFERENCES Phase(PhaseID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

-- Other Tables
CREATE TABLE Onboarding_Status (
    OnboardingID INT PRIMARY KEY,
    UserID INT,
    Stage VARCHAR(100),
    AssignedStaffID INT,
    StartDate DATE,
    EndDate DATE,
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID),
    FOREIGN KEY (AssignedStaffID) REFERENCES DBUser(UserID) -- Added foreign key
);

CREATE TABLE System_Notification (
    NotificationID INT PRIMARY KEY,
    UserID INT,
    Timestamp DATETIME,
    Status VARCHAR(50),  -- e.g., 'Unread', 'Read'
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

CREATE TABLE Partner_Interaction (
    InteractionID INT PRIMARY KEY,
    PartnerID INT,
    UserID INT,
    InteractionType VARCHAR(100),
    DateLogged DATE,
    FOREIGN KEY (PartnerID) REFERENCES Business_Partner(Business_Partner_ID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

CREATE TABLE Admin_Interaction (
    AdminInteractionID INT PRIMARY KEY,
    MeetingPurpose TEXT,
    DateHeld DATE,
    PartnerID INT,
    UserID INT,
    FOREIGN KEY (PartnerID) REFERENCES Business_Partner(Business_Partner_ID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

CREATE TABLE Calendar_Invite (
    InviteID INT PRIMARY KEY,
    EventID INT,
    UserID INT,
    Status VARCHAR(50),  -- e.g., Pending, Accepted, Declined
    FOREIGN KEY (EventID) REFERENCES Calendar_Event(EventID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

CREATE TABLE Grant_Message (
    GrantMessageID INT PRIMARY KEY,
    GrantID INT,
    SenderID INT,
    MessageText TEXT,
    SentDateTime DATETIME,
    FOREIGN KEY (GrantID) REFERENCES Grants(GrantID),
    FOREIGN KEY (SenderID) REFERENCES DBUser(UserID)
);

CREATE TABLE Grant_File (
    GrantFileID INT PRIMARY KEY,
    GrantID INT,
    FilePath VARCHAR(255),
    UploadedBy INT,
    UploadedDateTime DATETIME,
    FOREIGN KEY (GrantID) REFERENCES Grants(GrantID),
    FOREIGN KEY (UploadedBy) REFERENCES DBUser(UserID)
);

CREATE TABLE Grant_Tracking (
    TrackingID INT PRIMARY KEY,
    GrantID INT,
    StageName VARCHAR(100),
    Notes TEXT,
    CompletionDate DATE,
    FOREIGN KEY (GrantID) REFERENCES Grants(GrantID)
);

CREATE TABLE Grant_User (
    GrantUserID INT PRIMARY KEY,
    GrantID INT,
    UserID INT,
    AccessLevel VARCHAR(50), -- 'Read', 'Edit', 'FullControl'
    FOREIGN KEY (GrantID) REFERENCES Grants(GrantID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

CREATE TABLE Grant_Note (
    NoteID INT PRIMARY KEY,
    GrantID INT,
    Text_Content TEXT,
    FOREIGN KEY (GrantID) REFERENCES Grants(GrantID)
);

CREATE TABLE Grant_Project (
    GrantProjectID INT PRIMARY KEY,
    GrantID INT,
    ProjectID INT,
    FOREIGN KEY (GrantID) REFERENCES Grants(GrantID),
    FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID)
);

CREATE TABLE Project_User (
    ProjectUserID INT PRIMARY KEY,
    ProjectID INT,
    UserID INT,
    AccessLevel VARCHAR(50), -- 'Read', 'Edit', 'FullControl'
    FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

CREATE TABLE Project_Note (
    NoteID INT PRIMARY KEY,
    ProjectID INT,
    Text_Content TEXT,
    FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID)
);

CREATE TABLE Project_Message (
    ProjectMessageID INT PRIMARY KEY,
    ProjectID INT,
    SenderID INT,
    MessageText TEXT,
    SentDateTime DATETIME,
    FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID),
    FOREIGN KEY (SenderID) REFERENCES DBUser(UserID)
);

CREATE TABLE Master_Project_Message (
    MasterProjectMessageID INT PRIMARY KEY,
    MasterProjectID INT,
    SenderID INT,
    MessageText TEXT,
    SentDateTime DATETIME,
    FOREIGN KEY (MasterProjectID) REFERENCES Master_Project(MasterProjectID),
    FOREIGN KEY (SenderID) REFERENCES DBUser(UserID)
);

CREATE TABLE Project_File (
    FileID INT PRIMARY KEY,
    ProjectID INT,
    FilePath VARCHAR(255),
    UploadedBy INT,
    UploadedDateTime DATETIME,
    FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID),
    FOREIGN KEY (UploadedBy) REFERENCES DBUser(UserID)
);

CREATE TABLE Nested_Project (
    ParentProjectID INT,
    NestedProjectID INT,
    PRIMARY KEY (ParentProjectID, NestedProjectID),
    FOREIGN KEY (ParentProjectID) REFERENCES Project(ProjectID),
    FOREIGN KEY (NestedProjectID) REFERENCES Project(ProjectID)
);

CREATE TABLE Master_Project_Permission (
    MasterProjectID INT,
    UserID INT,
    AccessLevel VARCHAR(50), -- 'Read', 'Edit', etc.
    PRIMARY KEY (MasterProjectID, UserID),
    FOREIGN KEY (MasterProjectID) REFERENCES Master_Project(MasterProjectID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

-- Insert initial data
INSERT INTO UserRole (UserRoleID, RoleName, Description) VALUES
(1, 'Admin', 'Full access to manage users, settings, and data'),
(2, 'Contributor', 'Can add and edit content but has limited administrative privileges'),
(3, 'Viewer', 'Can view content but cannot modify anything'),
(4, 'Business Partner', 'External user with limited access to business-related data'),
(5, 'Employee', 'Internal user with role-based access to projects and data');


