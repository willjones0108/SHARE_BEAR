CREATE TABLE UserRole (
    UserRoleID INT PRIMARY KEY,
    RoleName VARCHAR(100),         -- Admin, Contributor, Viewer, etc.
    Description TEXT
);

CREATE TABLE Grants (
    GrantID INT IDENTITY(1,1) PRIMARY KEY,
    GrantTitle VARCHAR(255),
    Category VARCHAR(100),
    FundingSource VARCHAR(255),
    Amount DECIMAL(12,2),
    Status VARCHAR(50),
    CreatedBy INT,
    GrantLeadID INT,
    Description VARCHAR(MAX),
    TrackingStatus NVARCHAR(MAX),
    IsArchived BIT,
    IsProject BIT -- New field to indicate if the grant is a project
);

-- User Tables
CREATE TABLE DBUser (
    UserID INT IDENTITY(1,1) PRIMARY KEY,
    FirstName VARCHAR(100),
    LastName VARCHAR(100),
    Email VARCHAR(150),
    Username VARCHAR(150),
    UserRoleID INT,
    UpdatedAt DATETIME,
    IsArchived BIT,
    FOREIGN KEY (UserRoleID) REFERENCES UserRole(UserRoleID)
);




-- Add foreign keys to Grants now that DBUser exists
ALTER TABLE Grants
ADD CONSTRAINT FK_Grants_CreatedBy FOREIGN KEY (CreatedBy) REFERENCES DBUser(UserID);

ALTER TABLE Grants
ADD CONSTRAINT FK_Grants_GrantLeadID FOREIGN KEY (GrantLeadID) REFERENCES DBUser(UserID);

-- Project and Related Tables
CREATE TABLE Project (
    ProjectID INT PRIMARY KEY IDENTITY(1,1),
    Title VARCHAR(255),
    CreatedBy INT,
    GrantID INT NULL,
    ProjectType VARCHAR(50), 
    TrackingStatus NVARCHAR(MAX) NULL,
    IsArchived BIT,
    Project_Description TEXT NULL,
    ProjectPosition INT NULL,
    DueDate DATE NULL,
    StartDate DATE NULL,
    FOREIGN KEY (CreatedBy) REFERENCES DBUser(UserID)
   
);




CREATE TABLE Grant_Permission (
    GrantID INT,
    UserID INT,
    AccessLevel VARCHAR(50),       -- View, Edit, FullControl, etc.
    PRIMARY KEY (GrantID, UserID),
    FOREIGN KEY (GrantID) REFERENCES Grants(GrantID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

CREATE TABLE Project_Permission (
    ProjectID INT,
    UserID INT,
    AccessLevel VARCHAR(50),
    PRIMARY KEY (ProjectID, UserID),
    FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);

CREATE TABLE Phase (
    PhaseID INT PRIMARY KEY IDENTITY(1,1),
    PhaseName VARCHAR(255),
    Description TEXT NULL,
    Status VARCHAR(50),
    CreatedBy INT,
    PhaseLeadID INT,
    IsArchived BIT,
    PhasePosition INT,
    FOREIGN KEY (CreatedBy) REFERENCES DBUser(UserID),
    FOREIGN KEY (PhaseLeadID) REFERENCES DBUser(UserID)
);

CREATE TABLE Grant_Phase (
    GrantID INT,
    PhaseID INT,
    PRIMARY KEY (GrantID, PhaseID),
    FOREIGN KEY (GrantID) REFERENCES Grants(GrantID),
    FOREIGN KEY (PhaseID) REFERENCES Phase(PhaseID)
);

CREATE TABLE Phase_Project (
    PhaseID INT,
    ProjectID INT,
    PRIMARY KEY (PhaseID, ProjectID),
    FOREIGN KEY (PhaseID) REFERENCES Phase(PhaseID),
    FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID)
);

CREATE TABLE Phase_Permission (
    PhaseID INT,
    UserID INT,
    AccessLevel VARCHAR(50),       -- View, Edit, FullControl, etc.
    PRIMARY KEY (PhaseID, UserID),
    FOREIGN KEY (PhaseID) REFERENCES Phase(PhaseID),
    FOREIGN KEY (UserID) REFERENCES DBUser(UserID)
);


CREATE TABLE Message(
    MessageID int IDENTITY(1,1) PRIMARY KEY,
    SenderID int NOT NULL,
    RecipientID int NOT NULL,
    MessageText nvarchar(500) NOT NULL,
    SentDateTime DATETIME DEFAULT GETDATE(),
    Status varchar(20) NOT NULL CHECK (Status IN ('Sent', 'Read', 'Archived')),
    
    FOREIGN KEY (SenderID) REFERENCES DBUser(UserID) ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY (RecipientID) REFERENCES DBUser(UserID) ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE Documents (
    DocumentID INT IDENTITY(1,1) PRIMARY KEY,
    FileName NVARCHAR(255) NOT NULL,
    ContentType NVARCHAR(100) NOT NULL,
    FileSize BIGINT NOT NULL,
    UploadedDate DATETIME NOT NULL,
    UploadedBy INT NOT NULL,
    BlobUrl NVARCHAR(1000) NOT NULL,
    BlobName NVARCHAR(255) NOT NULL,
    GrantID INT NULL,
    PhaseID INT NULL,
    ProjectID INT NULL,
    IsArchived BIT NOT NULL DEFAULT 0,
    FOREIGN KEY (UploadedBy) REFERENCES DBUser(UserID),
    FOREIGN KEY (GrantID) REFERENCES Grants(GrantID),
    FOREIGN KEY (PhaseID) REFERENCES Phase(PhaseID),
    FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID),
)




-- Insert initial data
INSERT INTO UserRole (UserRoleID, RoleName, Description) VALUES
(1, 'Admin', 'Full access to manage users, settings, and data'),
(2, 'Contributor', 'Can add and edit content but has limited administrative privileges'),
(3, 'Viewer', 'Can view content but cannot modify anything'),
(4, 'Business Partner', 'External user with limited access to business-related data'),
(5, 'Employee', 'Internal user with role-based access to projects and data');

INSERT INTO DBUser (FirstName, LastName, Email, Username, UserRoleID, UpdatedAt, IsArchived) VALUES
('Admin', 'User', 'admin@example.com', 'admin', 1, GETDATE(), 0),
('User1', 'Example', 'user1@example.com', 'user1', 2, GETDATE(), 0),
('User2', 'Example', 'user2@example.com', 'user2', 3, GETDATE(), 0),
('User3', 'Example', 'user3@example.com', 'user3', 4, GETDATE(), 0);



